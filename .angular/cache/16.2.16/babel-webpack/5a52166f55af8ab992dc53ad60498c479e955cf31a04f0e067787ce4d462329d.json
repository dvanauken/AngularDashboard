{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport * as d3 from 'd3';\nimport { SelectionService } from '../selection.service';\nimport { DataService } from '../data.service';\nimport { Subscription } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../selection.service\";\nimport * as i2 from \"../data.service\";\nconst _c0 = [\"mapContainer\"];\nexport let MapComponent = /*#__PURE__*/(() => {\n  class MapComponent {\n    constructor(selectionService, dataService) {\n      this.selectionService = selectionService;\n      this.dataService = dataService;\n      this.selectedCountries = [];\n      this.subscription = new Subscription();\n    }\n    ngOnInit() {\n      this.subscription.add(this.selectionService.selectedCountries$.subscribe(countries => {\n        this.selectedCountries = countries;\n        this.updateMapSelection();\n      }));\n    }\n    ngAfterViewInit() {\n      this.createMap();\n    }\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n    createMap() {\n      const element = this.mapContainer.nativeElement;\n      const width = element.offsetWidth;\n      const height = element.offsetHeight;\n      this.svg = d3.select(element).append('svg').attr('width', width).attr('height', height);\n      this.projection = d3.geoMercator().scale(100).translate([width / 2, height / 2]);\n      this.path = d3.geoPath().projection(this.projection);\n      this.dataService.getWorldData().subscribe(worldData => {\n        this.geojson = worldData; // GeoJSON data is already in the correct format\n        this.drawMap();\n      }, error => console.error('Error loading world data:', error));\n    }\n    drawMap() {\n      this.svg.selectAll('path').data(this.geojson.features).enter().append('path').attr('d', this.path).attr('class', 'country').on('click', (event, d) => this.onCountryClick(event, d));\n      this.updateMapSelection();\n    }\n    onCountryClick(event, d) {\n      const countryId = d.properties.ISO_A3; // Use ISO_A3 as the identifier\n      if (event.shiftKey) {\n        this.addToSelection(countryId);\n      } else if (event.ctrlKey || event.metaKey) {\n        this.toggleSelection(countryId);\n      } else {\n        this.newSelection(countryId);\n      }\n    }\n    addToSelection(countryId) {\n      if (!this.selectedCountries.includes(countryId)) {\n        const updatedSelection = [...this.selectedCountries, countryId];\n        this.selectionService.updateSelection(updatedSelection);\n      }\n    }\n    toggleSelection(countryId) {\n      const updatedSelection = this.selectedCountries.includes(countryId) ? this.selectedCountries.filter(id => id !== countryId) : [...this.selectedCountries, countryId];\n      this.selectionService.updateSelection(updatedSelection);\n    }\n    newSelection(countryId) {\n      this.selectionService.updateSelection([countryId]);\n    }\n    updateMapSelection() {\n      if (this.svg) {\n        this.svg.selectAll('.country').classed('selected', d => this.selectedCountries.includes(d.properties.ISO_A3));\n      }\n    }\n    handleEscapeKey(event) {\n      this.selectionService.clearSelection();\n    }\n    clearSelection() {\n      this.selectionService.clearSelection();\n    }\n    static {\n      this.ɵfac = function MapComponent_Factory(t) {\n        return new (t || MapComponent)(i0.ɵɵdirectiveInject(i1.SelectionService), i0.ɵɵdirectiveInject(i2.DataService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: MapComponent,\n        selectors: [[\"app-map\"]],\n        viewQuery: function MapComponent_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(_c0, 7);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mapContainer = _t.first);\n          }\n        },\n        hostBindings: function MapComponent_HostBindings(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵlistener(\"keydown.escape\", function MapComponent_keydown_escape_HostBindingHandler($event) {\n              return ctx.handleEscapeKey($event);\n            }, false, i0.ɵɵresolveDocument);\n          }\n        },\n        decls: 14,\n        vars: 0,\n        consts: [[1, \"map-container\"], [\"mapContainer\", \"\"], [1, \"map-controls\"], [3, \"click\"], [1, \"map-legend\"], [1, \"legend-item\"], [1, \"color-box\", \"unselected\"], [1, \"color-box\", \"selected\"]],\n        template: function MapComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelement(0, \"div\", 0, 1);\n            i0.ɵɵelementStart(2, \"div\", 2)(3, \"button\", 3);\n            i0.ɵɵlistener(\"click\", function MapComponent_Template_button_click_3_listener() {\n              return ctx.clearSelection();\n            });\n            i0.ɵɵtext(4, \"Clear Selection\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(5, \"div\", 4)(6, \"div\", 5);\n            i0.ɵɵelement(7, \"div\", 6);\n            i0.ɵɵelementStart(8, \"span\");\n            i0.ɵɵtext(9, \"Unselected\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(10, \"div\", 5);\n            i0.ɵɵelement(11, \"div\", 7);\n            i0.ɵɵelementStart(12, \"span\");\n            i0.ɵɵtext(13, \"Selected\");\n            i0.ɵɵelementEnd()()();\n          }\n        },\n        styles: [\".map-container[_ngcontent-%COMP%]{width:100%;height:500px;border:1px solid #ccc}.map-controls[_ngcontent-%COMP%]{margin-top:10px}.map-controls[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{padding:5px 10px;background-color:#f0f0f0;border:1px solid #ccc;cursor:pointer}.map-controls[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover{background-color:#e0e0e0}.map-legend[_ngcontent-%COMP%]{margin-top:10px;display:flex}.map-legend[_ngcontent-%COMP%]   .legend-item[_ngcontent-%COMP%]{display:flex;align-items:center;margin-right:20px}.map-legend[_ngcontent-%COMP%]   .legend-item[_ngcontent-%COMP%]   .color-box[_ngcontent-%COMP%]{width:20px;height:20px;margin-right:5px}.map-legend[_ngcontent-%COMP%]   .legend-item[_ngcontent-%COMP%]   .color-box.unselected[_ngcontent-%COMP%]{background-color:#ccc}.map-legend[_ngcontent-%COMP%]   .legend-item[_ngcontent-%COMP%]   .color-box.selected[_ngcontent-%COMP%]{background-color:#06c}[_nghost-%COMP%]     .country{fill:#ccc;stroke:#fff;stroke-width:.5px}[_nghost-%COMP%]     .country.selected{fill:#06c}[_nghost-%COMP%]     .country:hover{fill:#999}\"]\n      });\n    }\n  }\n  return MapComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}