{"ast":null,"code":"import { Subscription } from 'rxjs';\nimport { SelectionService } from '../selection.service';\nimport { DataService } from '../data.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../selection.service\";\nimport * as i2 from \"../data.service\";\nimport * as i3 from \"@angular/common\";\nfunction TableComponent_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const country_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"selected\", ctx_r0.isSelected((country_r1 == null ? null : country_r1.ISO_A3) || \"\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(country_r1 == null ? null : country_r1.SOVEREIGNT);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 6, country_r1 == null ? null : country_r1.POP_EST));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(country_r1 == null ? null : country_r1.ISO_A3);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(country_r1 == null ? null : country_r1.ISO_A2);\n  }\n}\nexport let TableComponent = /*#__PURE__*/(() => {\n  class TableComponent {\n    constructor(selectionService, dataService) {\n      this.selectionService = selectionService;\n      this.dataService = dataService;\n      this.countries = [];\n      this.selectedCountries = [];\n      this.subscription = new Subscription();\n    }\n    ngOnInit() {\n      this.loadData();\n      this.subscription.add(this.selectionService.selectedCountries$.subscribe(countries => {\n        this.selectedCountries = countries;\n      }));\n    }\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n    loadData() {\n      this.dataService.getWorldData().subscribe(worldData => {\n        this.processWorldData(worldData);\n      }, error => {\n        console.error('Error loading country data:', error);\n        console.log('Error details:', error.error);\n        console.log('Status:', error.status);\n        console.log('Status Text:', error.statusText);\n        // Consider adding user-friendly error handling here, e.g., displaying an error message to the user\n      });\n    }\n\n    processWorldData(worldData) {\n      if (!worldData.features || !Array.isArray(worldData.features)) {\n        console.error('Invalid GeoJSON structure');\n        return;\n      }\n      this.countries = worldData.features.map(feature => ({\n        SOVEREIGNT: feature.properties.SOVEREIGNT,\n        POP_EST: feature.properties.POP_EST,\n        ISO_A3: feature.properties.ISO_A3,\n        ISO_A2: feature.properties.ISO_A2\n      }));\n    }\n    isSelected(countryId) {\n      return this.selectedCountries.includes(countryId);\n    }\n    onRowClick(event, countryId) {\n      if (event.shiftKey) {\n        this.addToSelection(countryId);\n      } else if (event.ctrlKey || event.metaKey) {\n        this.toggleSelection(countryId);\n      } else {\n        this.newSelection(countryId);\n      }\n    }\n    addToSelection(countryId) {\n      if (!this.selectedCountries.includes(countryId)) {\n        const updatedSelection = [...this.selectedCountries, countryId];\n        this.selectionService.updateSelection(updatedSelection);\n      }\n    }\n    toggleSelection(countryId) {\n      const updatedSelection = this.selectedCountries.includes(countryId) ? this.selectedCountries.filter(id => id !== countryId) : [...this.selectedCountries, countryId];\n      this.selectionService.updateSelection(updatedSelection);\n    }\n    newSelection(countryId) {\n      this.selectionService.updateSelection([countryId]);\n    }\n    clearSelection() {\n      this.selectionService.clearSelection();\n    }\n    // You can add sorting methods here if needed\n    sortByName() {\n      this.countries.sort((a, b) => a.SOVEREIGNT.localeCompare(b.SOVEREIGNT));\n    }\n    sortByPopulation() {\n      this.countries.sort((a, b) => b.POP_EST - a.POP_EST);\n    }\n    // You can add filtering methods here if needed\n    filterByContinent(continent) {\n      // This would require adding a continent property to the CountryData interface\n      // and including it in the processWorldData method\n      // this.countries = this.allCountries.filter(country => country.continent === continent);\n    }\n    static {\n      this.ɵfac = function TableComponent_Factory(t) {\n        return new (t || TableComponent)(i0.ɵɵdirectiveInject(i1.SelectionService), i0.ɵɵdirectiveInject(i2.DataService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: TableComponent,\n        selectors: [[\"app-table\"]],\n        decls: 13,\n        vars: 1,\n        consts: [[3, \"selected\", 4, \"ngFor\", \"ngForOf\"]],\n        template: function TableComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"table\")(1, \"thead\")(2, \"tr\")(3, \"th\");\n            i0.ɵɵtext(4, \"Sovereign State\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(5, \"th\");\n            i0.ɵɵtext(6, \"Population Estimate\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(7, \"th\");\n            i0.ɵɵtext(8, \"ISO 3166-1 alpha-3\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(9, \"th\");\n            i0.ɵɵtext(10, \"ISO 3166-1 alpha-2\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(11, \"tbody\");\n            i0.ɵɵtemplate(12, TableComponent_tr_12_Template, 10, 8, \"tr\", 0);\n            i0.ɵɵelementEnd()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(12);\n            i0.ɵɵproperty(\"ngForOf\", ctx.countries);\n          }\n        },\n        dependencies: [i3.NgForOf, i3.DecimalPipe],\n        styles: [\"[_nghost-%COMP%]{display:block;height:100%;overflow:auto}table[_ngcontent-%COMP%]{width:100%;border-collapse:collapse;font-family:Arial,sans-serif}th[_ngcontent-%COMP%], td[_ngcontent-%COMP%]{border:1px solid #ddd;padding:8px;text-align:left}th[_ngcontent-%COMP%]{background-color:#f2f2f2;font-weight:700;position:sticky;top:0;z-index:1}tr[_ngcontent-%COMP%]:nth-child(2n){background-color:#f9f9f9}tr[_ngcontent-%COMP%]:hover{background-color:#f5f5f5}tr.selected[_ngcontent-%COMP%]{background-color:#e6f3ff}tr.selected[_ngcontent-%COMP%]:hover{background-color:#d9edff}\"]\n      });\n    }\n  }\n  return TableComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}