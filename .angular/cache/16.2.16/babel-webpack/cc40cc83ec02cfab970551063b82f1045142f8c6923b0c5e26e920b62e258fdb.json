{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport * as d3 from 'd3';\nimport { SelectionService } from '../selection.service';\nimport { DataService } from '../data.service';\nimport { Subscription } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../selection.service\";\nimport * as i2 from \"../data.service\";\nconst _c0 = [\"mapContainer\"];\nexport class MapComponent {\n  constructor(selectionService, dataService) {\n    this.selectionService = selectionService;\n    this.dataService = dataService;\n    this.selectedCountries = [];\n    this.subscription = new Subscription();\n  }\n  ngOnInit() {\n    this.subscription.add(this.selectionService.selectedCountries$.subscribe(countries => {\n      this.selectedCountries = countries;\n      this.updateMapSelection();\n    }));\n  }\n  ngAfterViewInit() {\n    this.createMap();\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n  createMap() {\n    const element = this.mapContainer.nativeElement;\n    const width = element.offsetWidth;\n    const height = element.offsetHeight;\n    this.svg = d3.select(element).append('svg').attr('width', width).attr('height', height);\n    this.projection = d3.geoMercator().scale(100).translate([width / 2, height / 2]);\n    this.path = d3.geoPath().projection(this.projection);\n    this.dataService.getWorldData().subscribe(worldData => {\n      this.geojson = worldData;\n      this.drawMap();\n    }, error => {\n      console.error('Error loading world data:', error);\n      console.log('Error details:', error.error);\n      console.log('Status:', error.status);\n      console.log('Status Text:', error.statusText);\n    });\n  }\n  drawMap() {\n    this.svg.selectAll('path').data(this.geojson.features).enter().append('path').attr('d', this.path).attr('class', 'country').on('click', (event, d) => this.onCountryClick(event, d));\n    this.updateMapSelection();\n  }\n  onCountryClick(event, d) {\n    const countryId = d.properties.ISO_A3;\n    if (event.shiftKey) {\n      this.addToSelection(countryId);\n    } else if (event.ctrlKey || event.metaKey) {\n      this.toggleSelection(countryId);\n    } else {\n      this.newSelection(countryId);\n    }\n  }\n  addToSelection(countryId) {\n    if (!this.selectedCountries.includes(countryId)) {\n      const updatedSelection = [...this.selectedCountries, countryId];\n      this.selectionService.updateSelection(updatedSelection);\n    }\n  }\n  toggleSelection(countryId) {\n    const updatedSelection = this.selectedCountries.includes(countryId) ? this.selectedCountries.filter(id => id !== countryId) : [...this.selectedCountries, countryId];\n    this.selectionService.updateSelection(updatedSelection);\n  }\n  newSelection(countryId) {\n    this.selectionService.updateSelection([countryId]);\n  }\n  updateMapSelection() {\n    if (this.svg) {\n      this.svg.selectAll('.country').classed('selected', d => this.selectedCountries.includes(d.properties.ISO_A3));\n    }\n  }\n  handleEscapeKey(event) {\n    this.selectionService.clearSelection();\n  }\n  clearSelection() {\n    this.selectionService.clearSelection();\n  }\n  static {\n    this.ɵfac = function MapComponent_Factory(t) {\n      return new (t || MapComponent)(i0.ɵɵdirectiveInject(i1.SelectionService), i0.ɵɵdirectiveInject(i2.DataService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: MapComponent,\n      selectors: [[\"app-map\"]],\n      viewQuery: function MapComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mapContainer = _t.first);\n        }\n      },\n      hostBindings: function MapComponent_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"keydown.escape\", function MapComponent_keydown_escape_HostBindingHandler($event) {\n            return ctx.handleEscapeKey($event);\n          }, false, i0.ɵɵresolveDocument);\n        }\n      },\n      decls: 14,\n      vars: 0,\n      consts: [[1, \"map-container\"], [\"mapContainer\", \"\"], [1, \"map-controls\"], [3, \"click\"], [1, \"map-legend\"], [1, \"legend-item\"], [1, \"color-box\", \"unselected\"], [1, \"color-box\", \"selected\"]],\n      template: function MapComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"div\", 0, 1);\n          i0.ɵɵelementStart(2, \"div\", 2)(3, \"button\", 3);\n          i0.ɵɵlistener(\"click\", function MapComponent_Template_button_click_3_listener() {\n            return ctx.clearSelection();\n          });\n          i0.ɵɵtext(4, \"Clear Selection\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(5, \"div\", 4)(6, \"div\", 5);\n          i0.ɵɵelement(7, \"div\", 6);\n          i0.ɵɵelementStart(8, \"span\");\n          i0.ɵɵtext(9, \"Unselected\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(10, \"div\", 5);\n          i0.ɵɵelement(11, \"div\", 7);\n          i0.ɵɵelementStart(12, \"span\");\n          i0.ɵɵtext(13, \"Selected\");\n          i0.ɵɵelementEnd()()();\n        }\n      },\n      styles: [\".map-container[_ngcontent-%COMP%] {\\n  width: 100%;\\n  height: 500px;\\n  border: 1px solid #ccc;\\n}\\n\\n.map-controls[_ngcontent-%COMP%] {\\n  margin-top: 10px;\\n}\\n.map-controls[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\\n  padding: 5px 10px;\\n  background-color: #f0f0f0;\\n  border: 1px solid #ccc;\\n  cursor: pointer;\\n}\\n.map-controls[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover {\\n  background-color: #e0e0e0;\\n}\\n\\n.map-legend[_ngcontent-%COMP%] {\\n  margin-top: 10px;\\n  display: flex;\\n}\\n.map-legend[_ngcontent-%COMP%]   .legend-item[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: center;\\n  margin-right: 20px;\\n}\\n.map-legend[_ngcontent-%COMP%]   .legend-item[_ngcontent-%COMP%]   .color-box[_ngcontent-%COMP%] {\\n  width: 20px;\\n  height: 20px;\\n  margin-right: 5px;\\n}\\n.map-legend[_ngcontent-%COMP%]   .legend-item[_ngcontent-%COMP%]   .color-box.unselected[_ngcontent-%COMP%] {\\n  background-color: #ccc;\\n}\\n.map-legend[_ngcontent-%COMP%]   .legend-item[_ngcontent-%COMP%]   .color-box.selected[_ngcontent-%COMP%] {\\n  background-color: #0066cc;\\n}\\n\\n[_nghost-%COMP%]     .country {\\n  fill: #ccc;\\n  stroke: #fff;\\n  stroke-width: 0.5px;\\n}\\n[_nghost-%COMP%]     .country.selected {\\n  fill: #0066cc;\\n}\\n[_nghost-%COMP%]     .country:hover {\\n  fill: #999;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbWFwL21hcC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFdBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7QUFDRjs7QUFFQTtFQUNFLGdCQUFBO0FBQ0Y7QUFDRTtFQUNFLGlCQUFBO0VBQ0EseUJBQUE7RUFDQSxzQkFBQTtFQUNBLGVBQUE7QUFDSjtBQUNJO0VBQ0UseUJBQUE7QUFDTjs7QUFJQTtFQUNFLGdCQUFBO0VBQ0EsYUFBQTtBQURGO0FBR0U7RUFDRSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSxrQkFBQTtBQURKO0FBR0k7RUFDRSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGlCQUFBO0FBRE47QUFHTTtFQUNFLHNCQUFBO0FBRFI7QUFJTTtFQUNFLHlCQUFBO0FBRlI7O0FBVUU7RUFDRSxVQUFBO0VBQ0EsWUFBQTtFQUNBLG1CQUFBO0FBUEo7QUFTSTtFQUNFLGFBQUE7QUFQTjtBQVVJO0VBQ0UsVUFBQTtBQVJOIiwic291cmNlc0NvbnRlbnQiOlsiLm1hcC1jb250YWluZXIge1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIGhlaWdodDogNTAwcHg7ICAvLyBBZGp1c3QgYXMgbmVlZGVkXHJcbiAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcclxufVxyXG5cclxuLm1hcC1jb250cm9scyB7XHJcbiAgbWFyZ2luLXRvcDogMTBweDtcclxuXHJcbiAgYnV0dG9uIHtcclxuICAgIHBhZGRpbmc6IDVweCAxMHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2YwZjBmMDtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcblxyXG4gICAgJjpob3ZlciB7XHJcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNlMGUwZTA7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4ubWFwLWxlZ2VuZCB7XHJcbiAgbWFyZ2luLXRvcDogMTBweDtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG5cclxuICAubGVnZW5kLWl0ZW0ge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDIwcHg7XHJcblxyXG4gICAgLmNvbG9yLWJveCB7XHJcbiAgICAgIHdpZHRoOiAyMHB4O1xyXG4gICAgICBoZWlnaHQ6IDIwcHg7XHJcbiAgICAgIG1hcmdpbi1yaWdodDogNXB4O1xyXG5cclxuICAgICAgJi51bnNlbGVjdGVkIHtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2NjOyAgLy8gTWF0Y2ggdGhpcyB3aXRoIHlvdXIgbWFwJ3MgdW5zZWxlY3RlZCBjb2xvclxyXG4gICAgICB9XHJcblxyXG4gICAgICAmLnNlbGVjdGVkIHtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA2NmNjOyAgLy8gTWF0Y2ggdGhpcyB3aXRoIHlvdXIgbWFwJ3Mgc2VsZWN0ZWQgY29sb3JcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLy8gU3R5bGVzIGZvciB0aGUgbWFwIGl0c2VsZlxyXG46aG9zdCA6Om5nLWRlZXAge1xyXG4gIC5jb3VudHJ5IHtcclxuICAgIGZpbGw6ICNjY2M7XHJcbiAgICBzdHJva2U6ICNmZmY7XHJcbiAgICBzdHJva2Utd2lkdGg6IDAuNXB4O1xyXG5cclxuICAgICYuc2VsZWN0ZWQge1xyXG4gICAgICBmaWxsOiAjMDA2NmNjO1xyXG4gICAgfVxyXG5cclxuICAgICY6aG92ZXIge1xyXG4gICAgICBmaWxsOiAjOTk5O1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n    });\n  }\n}","map":{"version":3,"names":["ElementRef","d3","SelectionService","DataService","Subscription","MapComponent","constructor","selectionService","dataService","selectedCountries","subscription","ngOnInit","add","selectedCountries$","subscribe","countries","updateMapSelection","ngAfterViewInit","createMap","ngOnDestroy","unsubscribe","element","mapContainer","nativeElement","width","offsetWidth","height","offsetHeight","svg","select","append","attr","projection","geoMercator","scale","translate","path","geoPath","getWorldData","worldData","geojson","drawMap","error","console","log","status","statusText","selectAll","data","features","enter","on","event","d","onCountryClick","countryId","properties","ISO_A3","shiftKey","addToSelection","ctrlKey","metaKey","toggleSelection","newSelection","includes","updatedSelection","updateSelection","filter","id","classed","handleEscapeKey","clearSelection","i0","ɵɵdirectiveInject","i1","i2","selectors","viewQuery","MapComponent_Query","rf","ctx","$event","ɵɵresolveDocument","ɵɵelement","ɵɵelementStart","ɵɵlistener","MapComponent_Template_button_click_3_listener","ɵɵtext","ɵɵelementEnd"],"sources":["D:\\code\\webstorm\\AngularDashboard\\src\\app\\map\\map.component.ts","D:\\code\\webstorm\\AngularDashboard\\src\\app\\map\\map.component.html"],"sourcesContent":["import { Component, OnInit, AfterViewInit, ElementRef, ViewChild, HostListener, OnDestroy } from '@angular/core';\r\nimport * as d3 from 'd3';\r\nimport { SelectionService } from '../selection.service';\r\nimport { DataService } from '../data.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'app-map',\r\n    templateUrl: './map.component.html',\r\n    styleUrls: ['./map.component.scss']\r\n})\r\nexport class MapComponent implements OnInit, AfterViewInit, OnDestroy {\r\n    @ViewChild('mapContainer', { static: true }) private mapContainer!: ElementRef;\r\n    private svg: any;\r\n    private projection: any;\r\n    private path: any;\r\n    private geojson: any;\r\n    private selectedCountries: string[] = [];\r\n    private subscription: Subscription;\r\n\r\n    constructor(\r\n        private selectionService: SelectionService,\r\n        private dataService: DataService\r\n    ) {\r\n        this.subscription = new Subscription();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.subscription.add(\r\n            this.selectionService.selectedCountries$.subscribe(countries => {\r\n                this.selectedCountries = countries;\r\n                this.updateMapSelection();\r\n            })\r\n        );\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.createMap();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscription.unsubscribe();\r\n    }\r\n\r\n    private createMap(): void {\r\n        const element = this.mapContainer.nativeElement;\r\n        const width = element.offsetWidth;\r\n        const height = element.offsetHeight;\r\n\r\n        this.svg = d3.select(element).append('svg')\r\n            .attr('width', width)\r\n            .attr('height', height);\r\n\r\n        this.projection = d3.geoMercator()\r\n            .scale(100)\r\n            .translate([width / 2, height / 2]);\r\n\r\n        this.path = d3.geoPath().projection(this.projection);\r\n\r\n        this.dataService.getWorldData().subscribe(\r\n            (worldData: any) => {\r\n                this.geojson = worldData;\r\n                this.drawMap();\r\n            },\r\n            error => {\r\n                console.error('Error loading world data:', error);\r\n                console.log('Error details:', error.error);\r\n                console.log('Status:', error.status);\r\n                console.log('Status Text:', error.statusText);\r\n            }\r\n        );\r\n    }\r\n\r\n    private drawMap(): void {\r\n        this.svg.selectAll('path')\r\n            .data(this.geojson.features)\r\n            .enter()\r\n            .append('path')\r\n            .attr('d', this.path)\r\n            .attr('class', 'country')\r\n            .on('click', (event: MouseEvent, d: any) => this.onCountryClick(event, d));\r\n\r\n        this.updateMapSelection();\r\n    }\r\n\r\n    private onCountryClick(event: MouseEvent, d: any): void {\r\n        const countryId = d.properties.ISO_A3;\r\n        if (event.shiftKey) {\r\n            this.addToSelection(countryId);\r\n        } else if (event.ctrlKey || event.metaKey) {\r\n            this.toggleSelection(countryId);\r\n        } else {\r\n            this.newSelection(countryId);\r\n        }\r\n    }\r\n\r\n    private addToSelection(countryId: string) {\r\n        if (!this.selectedCountries.includes(countryId)) {\r\n            const updatedSelection = [...this.selectedCountries, countryId];\r\n            this.selectionService.updateSelection(updatedSelection);\r\n        }\r\n    }\r\n\r\n    private toggleSelection(countryId: string) {\r\n        const updatedSelection = this.selectedCountries.includes(countryId)\r\n            ? this.selectedCountries.filter(id => id !== countryId)\r\n            : [...this.selectedCountries, countryId];\r\n        this.selectionService.updateSelection(updatedSelection);\r\n    }\r\n\r\n    private newSelection(countryId: string) {\r\n        this.selectionService.updateSelection([countryId]);\r\n    }\r\n\r\n    private updateMapSelection(): void {\r\n        if (this.svg) {\r\n            this.svg.selectAll('.country')\r\n                .classed('selected', (d: any) => this.selectedCountries.includes(d.properties.ISO_A3));\r\n        }\r\n    }\r\n\r\n    @HostListener('document:keydown.escape', ['$event'])\r\n    handleEscapeKey(event: KeyboardEvent) {\r\n        this.selectionService.clearSelection();\r\n    }\r\n\r\n    clearSelection() {\r\n        this.selectionService.clearSelection();\r\n    }\r\n}","<div class=\"map-container\" #mapContainer>\r\n  <!-- The D3 map will be rendered here -->\r\n</div>\r\n\r\n<div class=\"map-controls\">\r\n  <button (click)=\"clearSelection()\">Clear Selection</button>\r\n</div>\r\n\r\n<div class=\"map-legend\">\r\n  <div class=\"legend-item\">\r\n    <div class=\"color-box unselected\"></div>\r\n    <span>Unselected</span>\r\n  </div>\r\n  <div class=\"legend-item\">\r\n    <div class=\"color-box selected\"></div>\r\n    <span>Selected</span>\r\n  </div>\r\n</div>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}