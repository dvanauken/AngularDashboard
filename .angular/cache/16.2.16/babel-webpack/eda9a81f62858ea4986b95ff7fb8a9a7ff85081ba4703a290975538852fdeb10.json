{"ast":null,"code":"import { Subscription } from 'rxjs';\nimport { SelectionService } from '../selection.service';\nimport { DataService } from '../data.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../selection.service\";\nimport * as i2 from \"../data.service\";\nimport * as i3 from \"@angular/common\";\nfunction TableComponent_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 1);\n    i0.ɵɵlistener(\"click\", function TableComponent_tr_12_Template_tr_click_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const country_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onRowClick($event, country_r1.id));\n    });\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const country_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"selected\", ctx_r0.isSelected(country_r1.id));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(country_r1.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(country_r1.type);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.countArcs(country_r1.arcs));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.calculateComplexity(country_r1.arcs));\n  }\n}\nexport class TableComponent {\n  constructor(selectionService, dataService) {\n    this.selectionService = selectionService;\n    this.dataService = dataService;\n    this.countries = [];\n    this.selectedCountries = [];\n    this.subscription = new Subscription();\n  }\n  ngOnInit() {\n    this.loadData();\n    this.subscription.add(this.selectionService.selectedCountries$.subscribe(countries => {\n      this.selectedCountries = countries;\n    }));\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n  loadData() {\n    this.dataService.getWorldData().subscribe(worldData => {\n      this.processWorldData(worldData);\n    }, error => {\n      console.error('Error loading country data:', error);\n    });\n  }\n  processWorldData(worldData) {\n    const countriesGeometry = worldData.objects.countries.geometries;\n    this.countries = countriesGeometry.map(geo => ({\n      id: geo.id,\n      type: geo.type,\n      arcs: geo.arcs\n    }));\n  }\n  countArcs(arcs) {\n    if (!arcs) return 0;\n    if (Array.isArray(arcs[0])) {\n      return arcs.length;\n    } else {\n      return 1;\n    }\n  }\n  calculateComplexity(arcs) {\n    if (!arcs) return 0;\n    if (Array.isArray(arcs[0])) {\n      return arcs.flat(Infinity).length;\n    } else {\n      return arcs.length;\n    }\n  }\n  isSelected(countryId) {\n    return this.selectedCountries.includes(countryId);\n  }\n  onCheckboxChange(event, countryId) {\n    const isChecked = event.target.checked;\n    let updatedSelection = [...this.selectedCountries];\n    if (isChecked && !updatedSelection.includes(countryId)) {\n      updatedSelection.push(countryId);\n    } else if (!isChecked) {\n      updatedSelection = updatedSelection.filter(id => id !== countryId);\n    }\n    this.selectionService.updateSelection(updatedSelection);\n  }\n  onRowClick(event, countryId) {\n    if (event.shiftKey) {\n      this.addToSelection(countryId);\n    } else if (event.ctrlKey || event.metaKey) {\n      this.toggleSelection(countryId);\n    } else {\n      this.newSelection(countryId);\n    }\n  }\n  addToSelection(countryId) {\n    if (!this.selectedCountries.includes(countryId)) {\n      const updatedSelection = [...this.selectedCountries, countryId];\n      this.selectionService.updateSelection(updatedSelection);\n    }\n  }\n  toggleSelection(countryId) {\n    const updatedSelection = this.selectedCountries.includes(countryId) ? this.selectedCountries.filter(id => id !== countryId) : [...this.selectedCountries, countryId];\n    this.selectionService.updateSelection(updatedSelection);\n  }\n  newSelection(countryId) {\n    this.selectionService.updateSelection([countryId]);\n  }\n  clearSelection() {\n    this.selectionService.clearSelection();\n  }\n  static {\n    this.ɵfac = function TableComponent_Factory(t) {\n      return new (t || TableComponent)(i0.ɵɵdirectiveInject(i1.SelectionService), i0.ɵɵdirectiveInject(i2.DataService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TableComponent,\n      selectors: [[\"app-table\"]],\n      decls: 13,\n      vars: 1,\n      consts: [[3, \"selected\", \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\"]],\n      template: function TableComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"table\")(1, \"thead\")(2, \"tr\")(3, \"th\");\n          i0.ɵɵtext(4, \"Country ID\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"th\");\n          i0.ɵɵtext(6, \"Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"th\");\n          i0.ɵɵtext(8, \"Arc Count\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"th\");\n          i0.ɵɵtext(10, \"Complexity\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(11, \"tbody\");\n          i0.ɵɵtemplate(12, TableComponent_tr_12_Template, 9, 6, \"tr\", 0);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(12);\n          i0.ɵɵproperty(\"ngForOf\", ctx.countries);\n        }\n      },\n      dependencies: [i3.NgForOf],\n      styles: [\"[_nghost-%COMP%] {\\n  display: block;\\n  height: 100%;\\n  overflow: auto;\\n}\\n\\ntable[_ngcontent-%COMP%] {\\n  width: 100%;\\n  border-collapse: collapse;\\n  font-family: Arial, sans-serif;\\n}\\n\\nth[_ngcontent-%COMP%], td[_ngcontent-%COMP%] {\\n  border: 1px solid #ddd;\\n  padding: 8px;\\n  text-align: left;\\n}\\n\\nth[_ngcontent-%COMP%] {\\n  background-color: #f2f2f2;\\n  font-weight: bold;\\n  position: sticky;\\n  top: 0;\\n  z-index: 1;\\n}\\n\\ntr[_ngcontent-%COMP%]:nth-child(even) {\\n  background-color: #f9f9f9;\\n}\\n\\ntr[_ngcontent-%COMP%]:hover {\\n  background-color: #f5f5f5;\\n}\\n\\ntr.selected[_ngcontent-%COMP%] {\\n  background-color: #e6f3ff;\\n}\\n\\ntr.selected[_ngcontent-%COMP%]:hover {\\n  background-color: #d9edff;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdGFibGUvdGFibGUuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxjQUFBO0VBQ0EsWUFBQTtFQUNBLGNBQUE7QUFDRjs7QUFFQTtFQUNFLFdBQUE7RUFDQSx5QkFBQTtFQUNBLDhCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxzQkFBQTtFQUNBLFlBQUE7RUFDQSxnQkFBQTtBQUNGOztBQUVBO0VBQ0UseUJBQUE7RUFDQSxpQkFBQTtFQUNBLGdCQUFBO0VBQ0EsTUFBQTtFQUNBLFVBQUE7QUFDRjs7QUFFQTtFQUNFLHlCQUFBO0FBQ0Y7O0FBRUE7RUFDRSx5QkFBQTtBQUNGOztBQUVBO0VBQ0UseUJBQUE7QUFDRjs7QUFFQTtFQUNFLHlCQUFBO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyI6aG9zdCB7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbiAgaGVpZ2h0OiAxMDAlO1xyXG4gIG92ZXJmbG93OiBhdXRvO1xyXG59XHJcblxyXG50YWJsZSB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcclxuICBmb250LWZhbWlseTogQXJpYWwsIHNhbnMtc2VyaWY7XHJcbn1cclxuXHJcbnRoLCB0ZCB7XHJcbiAgYm9yZGVyOiAxcHggc29saWQgI2RkZDtcclxuICBwYWRkaW5nOiA4cHg7XHJcbiAgdGV4dC1hbGlnbjogbGVmdDtcclxufVxyXG5cclxudGgge1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgcG9zaXRpb246IHN0aWNreTtcclxuICB0b3A6IDA7XHJcbiAgei1pbmRleDogMTtcclxufVxyXG5cclxudHI6bnRoLWNoaWxkKGV2ZW4pIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjlmOWY5O1xyXG59XHJcblxyXG50cjpob3ZlciB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y1ZjVmNTtcclxufVxyXG5cclxudHIuc2VsZWN0ZWQge1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICNlNmYzZmY7XHJcbn1cclxuXHJcbnRyLnNlbGVjdGVkOmhvdmVyIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDllZGZmO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n    });\n  }\n}","map":{"version":3,"names":["Subscription","SelectionService","DataService","i0","ɵɵelementStart","ɵɵlistener","TableComponent_tr_12_Template_tr_click_0_listener","$event","restoredCtx","ɵɵrestoreView","_r3","country_r1","$implicit","ctx_r2","ɵɵnextContext","ɵɵresetView","onRowClick","id","ɵɵtext","ɵɵelementEnd","ɵɵclassProp","ctx_r0","isSelected","ɵɵadvance","ɵɵtextInterpolate","type","countArcs","arcs","calculateComplexity","TableComponent","constructor","selectionService","dataService","countries","selectedCountries","subscription","ngOnInit","loadData","add","selectedCountries$","subscribe","ngOnDestroy","unsubscribe","getWorldData","worldData","processWorldData","error","console","countriesGeometry","objects","geometries","map","geo","Array","isArray","length","flat","Infinity","countryId","includes","onCheckboxChange","event","isChecked","target","checked","updatedSelection","push","filter","updateSelection","shiftKey","addToSelection","ctrlKey","metaKey","toggleSelection","newSelection","clearSelection","ɵɵdirectiveInject","i1","i2","selectors","decls","vars","consts","template","TableComponent_Template","rf","ctx","ɵɵtemplate","TableComponent_tr_12_Template","ɵɵproperty"],"sources":["D:\\code\\webstorm\\AngularDashboard\\src\\app\\table\\table.component.ts","D:\\code\\webstorm\\AngularDashboard\\src\\app\\table\\table.component.html"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { SelectionService } from '../selection.service';\r\nimport { DataService } from '../data.service';\r\n\r\ninterface CountryData {\r\n  SOVEREIGNT: string;\r\n  POP_EST: number;\r\n  ISO_A3: string;\r\n  ISO_A2: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-table',\r\n  templateUrl: './table.component.html',\r\n  styleUrls: ['./table.component.scss']\r\n})\r\nexport class TableComponent implements OnInit, OnDestroy {\r\n  countries: CountryData[] = [];\r\n  selectedCountries: string[] = [];\r\n  private subscription: Subscription;\r\n\r\n  constructor(\r\n    private selectionService: SelectionService,\r\n    private dataService: DataService\r\n  ) {\r\n    this.subscription = new Subscription();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loadData();\r\n    this.subscription.add(\r\n      this.selectionService.selectedCountries$.subscribe(countries => {\r\n        this.selectedCountries = countries;\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  loadData() {\r\n    this.dataService.getWorldData().subscribe(\r\n      (worldData: any) => {\r\n        this.processWorldData(worldData);\r\n      },\r\n      (error: any) => {\r\n        console.error('Error loading country data:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  \r\n\r\n  private processWorldData(worldData: any) {\r\n    const countriesGeometry = worldData.objects.countries.geometries;\r\n    this.countries = countriesGeometry.map((geo: any) => ({\r\n      id: geo.id,\r\n      type: geo.type,\r\n      arcs: geo.arcs\r\n    }));\r\n  }\r\n\r\n  public countArcs(arcs: any[] | undefined): number {\r\n    if (!arcs) return 0;\r\n    if (Array.isArray(arcs[0])) {\r\n      return arcs.length;\r\n    } else {\r\n      return 1;\r\n    }\r\n  }\r\n\r\n  public calculateComplexity(arcs: any[] | undefined): number {\r\n    if (!arcs) return 0;\r\n    if (Array.isArray(arcs[0])) {\r\n      return arcs.flat(Infinity).length;\r\n    } else {\r\n      return arcs.length;\r\n    }\r\n  }\r\n\r\n  isSelected(countryId: string): boolean {\r\n    return this.selectedCountries.includes(countryId);\r\n  }\r\n\r\n  onCheckboxChange(event: Event, countryId: string) {\r\n    const isChecked = (event.target as HTMLInputElement).checked;\r\n    let updatedSelection = [...this.selectedCountries];\r\n\r\n    if (isChecked && !updatedSelection.includes(countryId)) {\r\n      updatedSelection.push(countryId);\r\n    } else if (!isChecked) {\r\n      updatedSelection = updatedSelection.filter(id => id !== countryId);\r\n    }\r\n\r\n    this.selectionService.updateSelection(updatedSelection);\r\n  }\r\n\r\n  onRowClick(event: MouseEvent, countryId: string) {\r\n    if (event.shiftKey) {\r\n      this.addToSelection(countryId);\r\n    } else if (event.ctrlKey || event.metaKey) {\r\n      this.toggleSelection(countryId);\r\n    } else {\r\n      this.newSelection(countryId);\r\n    }\r\n  }\r\n\r\n  private addToSelection(countryId: string) {\r\n    if (!this.selectedCountries.includes(countryId)) {\r\n      const updatedSelection = [...this.selectedCountries, countryId];\r\n      this.selectionService.updateSelection(updatedSelection);\r\n    }\r\n  }\r\n\r\n  private toggleSelection(countryId: string) {\r\n    const updatedSelection = this.selectedCountries.includes(countryId)\r\n      ? this.selectedCountries.filter(id => id !== countryId)\r\n      : [...this.selectedCountries, countryId];\r\n    this.selectionService.updateSelection(updatedSelection);\r\n  }\r\n\r\n  private newSelection(countryId: string) {\r\n    this.selectionService.updateSelection([countryId]);\r\n  }\r\n\r\n  clearSelection() {\r\n    this.selectionService.clearSelection();\r\n  }\r\n}\r\n","<table>\r\n  <thead>\r\n  <tr>\r\n    <th>Country ID</th>\r\n    <th>Type</th>\r\n    <th>Arc Count</th>\r\n    <th>Complexity</th>\r\n  </tr>\r\n  </thead>\r\n  <tbody>\r\n  <tr *ngFor=\"let country of countries\"\r\n      [class.selected]=\"isSelected(country.id)\"\r\n      (click)=\"onRowClick($event, country.id)\">\r\n    <td>{{ country.id }}</td>\r\n    <td>{{ country.type }}</td>\r\n    <td>{{ countArcs(country.arcs) }}</td>\r\n    <td>{{ calculateComplexity(country.arcs) }}</td>\r\n  </tr>\r\n  </tbody>\r\n</table>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}